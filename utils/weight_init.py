import warnings
import math
import torch

def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1. + math.erf(x / math.sqrt(2.))) / 2.

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn("mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
                      "The distribution of values may be incorrect.",
                      stacklevel=2)

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor
def trunc_normal_(tensor, mean=0., std=1., a=-2., b=2.):
    r"""
    Fills the input Tensor with values drawn from a truncated
    normal distribution. The values are effectively drawn from the
    normal distribution :math:`\mathcal{N}(\text{mean}, \text{std}^2)`
    with values outside :math:`[a, b]` redrawn until they are within
    the bounds. The method used for generating the random values works
    best when :math:`a \leq \text{mean} \leq b`.
    Args:
        tensor: an n-dimensional `torch.Tensor`
        mean: the mean of the normal distribution
        std: the standard deviation of the normal distribution
        a: the minimum cutoff value
        b: the maximum cutoff value
    Examples:
        >>> w = torch.empty(3, 5)
        >>> nn.init.trunc_normal_(w)
    """
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def weights_init(net, init_type='xavier', init_gain=0.02, bias_init='zero'):
    """
    初始化神经网络的权重。

    :param net: 神经网络模型
    :param init_type: 权重初始化方法，支持 'normal', 'xavier', 'kaiming', 'orthogonal'
    :param init_gain: 初始化增益，用于调整分布的标准差或范围
    :param bias_init: 偏置初始化方式，'zero' 或 'normal'
    """

    def init_func(m):
        classname = m.__class__.__name__

        # 针对卷积层
        if hasattr(m, 'weight') and classname.find('Conv') != -1:
            if init_type == 'normal':
                torch.nn.init.normal_(m.weight.data, 0.0, init_gain)
            elif init_type == 'xavier':
                torch.nn.init.xavier_normal_(m.weight.data, gain=init_gain)
            elif init_type == 'kaiming':
                torch.nn.init.kaiming_normal_(m.weight.data, a=0, mode='fan_in')
            elif init_type == 'orthogonal':
                torch.nn.init.orthogonal_(m.weight.data, gain=init_gain)
            else:
                raise NotImplementedError(f"Initialization method [{init_type}] is not implemented")

            # 对偏置进行初始化
            if hasattr(m, 'bias') and m.bias is not None:
                if bias_init == 'zero':
                    torch.nn.init.constant_(m.bias.data, 0.0)
                elif bias_init == 'normal':
                    torch.nn.init.normal_(m.bias.data, 0.0, init_gain)
                else:
                    raise NotImplementedError(f"Bias initialization method [{bias_init}] is not implemented")

        # 针对全连接层 (Linear Layer)
        elif classname.find('Linear') != -1:
            if init_type == 'normal':
                torch.nn.init.normal_(m.weight.data, 0.0, init_gain)
            elif init_type == 'xavier':
                torch.nn.init.xavier_normal_(m.weight.data, gain=init_gain)
            elif init_type == 'kaiming':
                torch.nn.init.kaiming_normal_(m.weight.data, a=0, mode='fan_in')
            elif init_type == 'orthogonal':
                torch.nn.init.orthogonal_(m.weight.data, gain=init_gain)
            else:
                raise NotImplementedError(f"Initialization method [{init_type}] is not implemented")

            # 对偏置进行初始化
            if hasattr(m, 'bias') and m.bias is not None:
                if bias_init == 'zero':
                    torch.nn.init.constant_(m.bias.data, 0.0)
                elif bias_init == 'normal':
                    torch.nn.init.normal_(m.bias.data, 0.0, init_gain)
                else:
                    raise NotImplementedError(f"Bias initialization method [{bias_init}] is not implemented")

        # 针对批归一化层（BatchNorm Layer）
        elif classname.find('BatchNorm') != -1:
            # 这里考虑到可能有 BatchNorm1d, BatchNorm2d, BatchNorm3d 等
            torch.nn.init.normal_(m.weight.data, 1.0, 0.02)
            torch.nn.init.constant_(m.bias.data, 0.0)

        # 针对其他层的初始化
        elif classname.find('Embedding') != -1:  # 如Embedding层
            torch.nn.init.normal_(m.weight.data, 0.0, init_gain)

        # 针对ReLU激活层等
        elif classname.find('ReLU') != -1:
            pass  # ReLU 通常没有初始化

    # 打印初始化方式
    print(f'Initializing network with {init_type} type and bias init {bias_init}')
    net.apply(init_func)